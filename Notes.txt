Trainer Name  - Pravinkumar Dabade
Email - dabade.pravinkumar@gmail.com
Contact # - 9665622460


Introduction to React 

Developing SPA - Single Page Application [Authentication/Authorization] [MERN - MongoDB/Express/React JS/Node JS]

functions written with function keyword - has implicit binding with "this" keyword and because of implicit binding the owner of this keyword may get changed place to place

functions written with arrow function syntax - does not have implicit binding with "this" keyword hence the context/owner change will never happen

for example - 

const Customer={

	customerId:1000,
	contactName:"Pravinkumar R. D.",
	city:"Pune",
	printCustomer:function(){
		setTimeout(()=>{
			console.log(`{this.contactName}`);
		},2000);
	}
}

Window.setTime()

Customer.printCustomer(); //Pravinkumar R. D.



Components in React - 
Till 16.7 - 
	Class Component - Container/Stateful/Smart/Class
	Functional Component - Presentation/Stateless/Dumb/Function

16.8 and onwards - Functional Component recommended by React team which use hooks
	

Installation - 

	1) Node JS LTS version
		https://nodejs.org/en/download
	2) Visual Studio Code
		https://code.visualstudio.com/download
	3) MongoDB Community Server
		https://www.mongodb.com/try/download/community
	4) Mongo Shell
		https://www.mongodb.com/try/download/shell



Preferred Language is JSX - JavaScript Extension

	Component file extensions will always .JSX
	Component Name [File] should be Capital Camel Casing [HelloWorld.jsx]
	Per Component create its external CSS file [HelloWorld.css]


ESM - ECMAScript Module is a JavaScript file which contains [import and export statements] [.js/jsx/ts/tsx]

Export - default export and named export
	only one default export per module
	as many named exports as you want

	named exports while importing must be enclosed in {one, two, three}
	default export will be imported without {} brackets

Configure Bootstrap CSS Framework - 

npm install bootstrap

main.jsx  

//third-party Framework 
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';

In React - All CSS properties are defined as camelCase properties
	for Example - textAlign:'center'

Custom CSS - 
	1) In-line CSS - with the help of style attribute
	2) Document level CSS
	3) External CSS as a module [CSS As-A Module]
		FileName.module.css
		
		
Day-1 Assignments - 

	1) Create React application using Vite - 
		thales-group-events-portal
	2) Configure Bootstrap CSS Framework

Day-2

React Hooks are functions!

useState(initialStateValue) =>[state,funcToChangeState]

Destructuring syntax [Array/Object] [ES6]
const [counter,setCounter] = useState(0);

const {value,setValue}=function(); =>{value,changeValueFunc}


State object is modified asynchronously 

Structure of React Application - 
Feature-wise Folder Structure 
src
	Events
		Components
			EventsList.jsx
			EventDetails.jsx
			RegisterEvent.jsx
			...
		Services
			EventsService.js [Functions]
	Employees
		Components
			EmpoyeesList.jsx
			EmployeeDetails.jsx
			RegisterEmployee.jsx
			...
		Services
			EmployeesService.js [Functions]
	Security
		Components
			Login.jsx
			Register.jsx
			ForgotPassword.jsx
			ChangePassword.jsx
		Services
			SecurityService.js [Functions]
	Home
		Components
			ThalesHome.jsx
	Navigation
		Components
			Navbar.jsx
			Footer.jsx
		Services
	Shared
		Components
			NotFount.jsx
			Unauthorized.jsx
			Forbidden.jsx
		Utilities 
			Globalization.js



Day-2 Assignments - 
	1) Add EmployeesList, EmployeeDetails components in events portal application and use service to fetch the data for each one of them
		a) Using useState() hook
		b) Using useReducer() hook


useState() - Maintain state in functional component. 
	use it when you are maintain simple state [primitive types - Number, Boolean, String]
	use it when you want component to control the state

useReducer() - Maintain state in functional component. 
	use it when you have complex logic involved while changing the state
	use it when you want the state change to be isolated from the component and reuse the same logic in other components too!


This function is responsible for managing the state object [updating/initialization]

const InitialState={
	events:[],
	eventId:0
}

function reducer(state = InitialState, action){
	switch(action.type){
		case:'FETCH_ALL_EVENTS'
			state={
				...state,
				events: action.payload
			}
			break;
		case:'FETCH_EVENT_DETAILS_ID':
			state={
				...state,
				eventId: action.payload
			}
			break;
		default:
			break;
	}
	return state;
}

the second parameter is action which is an object - 
	{ type: 'FETCH_ALL_EVENTS', payload: data }

Component "dispatch" the action - { type: 'FETCH_ALL_EVENTS', payload: data }, it goes to the reducer function to handle the action of a given type and update the state with the payload


RDBMS [SQL] Servers						NoSQL Database Servers
	Microsoft SQL Server, MySQL, Oracle,...				MongoDB
		Databases							Databases
			Table								Collection
				Cols/Rows							Documents



What is document?
Document is a JSON like object. For Example - 
{
	_id: akjdbksali89oia899
	property: value,
	property: value,
	property: {
		property: value,
		property: [1,2,3]
	},
	property: value
}


To manipulate the documents, MongoDB provides number of functions which follows camel casing and data is case sensitive.

Write queries - 
1) Show all existing databases - 
	show dbs;
2) How to create new database?
	 use thales-group-events-db;
3) How to add new collection in a connected database?
	db.createCollection("events");
	db.createCollection("employees");
	db.createCollection("users");
4) Display all the collection
	show collections;
5) Insert document(s) in a collection
	db.users.insertOne({email:"alisha.c@thales.com",password:"Welcome@123",role:"Hr"}); 
	db.users.insertOne({email:"manish.kaushik@thales.com",password:"Welcome@123",role:"Employee"});
	Bulk insertion
	db.events.insertMany([...]);
	db.employees.insertMany([
        {
            employeeId: 2370,
            employeeName: "Pravinkumar R. D.",
            address: "Suncity, A8/404",
            city: "Pune",
            zipcode: 411051,
            phone: "+91 23892893",
            email: "pravin.r.d@synechron.com",
            skillSets: "Microsoft/JavaScript",
            country: "India",
            joiningDate:new Date(),
            avatar: "images/noimage.png"
        },
        {
            employeeId: 2372,
            employeeName: "Manish Kaushik",
            address: "Mooncity, Z8/404",
            city: "Raipur",
            zipcode: 459899,
            phone: "+91 9039039090",
            email: "manish.kaushik@synechron.com",
            skillSets: "DBA",
            country: "India",
            joiningDate:new Date(),
            avatar: "images/noimage.png"
        },
        {
            employeeId: 2374,
            employeeName: "Alisha C.",
            address: "Mooncity, B8/404",
            city: "Mumbai",
            zipcode: 510512,
            phone: "+91 30003000",
            email: "alisha.c@synechron.com",
            skillSets: "Java",
            country: "India",
            joiningDate:new Date(),
            avatar: "images/noimage.png"
        }
    ]);
 
6) How to query collection data?
	db.users.find();
	db.events.find();
	db.employees.find();
	
	db.users.find({role:'Hr'});

	db.users.findOne();

	db.events.findOne({eventId:1003});

7) How to update a document?

8) Delete document(s)?
	db.users.deleteOne({role:'Hr'});
	db.users.deleteMany({});




REST API - thales-events-service

	To run the API, open VS Code Terminal with CMD Prompt and run the below command - 

		node events-rest-server.js

	http://localhost:9090/api/employees [GET]
	http://localhost:9090/api/employees/2370 [GET]
	htp://localhost:9090/api/employees [POST]

	http://localhost:9090/api/events [GET]
	http://localhost:9090/api/events/1001 [GET]
	http://localhost:9090/api/event [POST]

	http://localhost:9090/api/users [POST] 
	http://localhost:9090/api/users/authenticate [POST] 


Complete Page Post Back [Full Page render]
Partial Page Rendering

Single Page Application [SPA] Development

Routing library [react-router-dom/react-router]
	1) Route Declaration [Routes and Route]
		http://localhost:5173 [Default] [Default/Home Component]
		http://localhost:5173/home [Named Routes] [ThalesHome Component]
		http://localhost:5173/employees [Named Routes] [EmployeesList Component]
		http://localhost:5173/employees/profile [Named Routes] [EmployeesList Component]
		http://localhost:5173/employees/2372 [Dynamic Route/Parameterized Route] [EmployeeDetails Component]
			useParams()
		Or
		http://localhost:5173/employees?employeeId=2892
			useSearchParams()
		http://localhost:5173/events [Named Routes] [EventsList Component]
		http://localhost:5173/events/1002 [Dynamic Route/Parameterized Route] [EventDetails Component]
		http://localhost:5173/login [Named Routes] [Login Component]
		http://localhost:5173/signup [Named Routes] [Signup Component]
		
	2) Programmatic Redirections/Navigations
		Hook to call routes dynamically - useNavigate()

	3) Declarative Redirection/Navigation using in-build components from react-router library
		Components to call routes [NavLink, Link]
	4) Route Protection
		/login?returnurl=/events
	5) Number of Hooks for route accessibility and manipulation

	6) Provides number of components which we can use during route configuration
		<outlet/> - used for rendering children routes/nested routes



Security - JSON Web Token you can store it in form of Cookie and API needs to implement this cookie as Http Only Cookie


Parent and Children Routes 

React Context API which provides two things - 

Class components as well as Functional Component

Provider - Provide the access to the state object

Consumer - Will receive the state from the Provider

<Layout>
	{children}
</Layout>







